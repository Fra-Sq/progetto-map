.TH "di.uniba.map.b.adventure.GameDescription" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
di.uniba.map.b.adventure.GameDescription
.SH SYNOPSIS
.br
.PP
.PP
Inherited by \fBdi\&.uniba\&.map\&.b\&.adventure\&.impl\&.SpaceEscape\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "List< \fBRoom\fP > \fBgetRooms\fP ()"
.br
.ti -1c
.RI "void \fBsetCurrentRoomById\fP (int roomId)"
.br
.ti -1c
.RI "void \fBsetGame\fP (int roomId, List< Integer > inventoryIds, boolean monsterAlive, boolean isDoorOpen)"
.br
.ti -1c
.RI "List< \fBCommand\fP > \fBgetCommands\fP ()"
.br
.ti -1c
.RI "\fBRoom\fP \fBgetCurrentRoom\fP ()"
.br
.ti -1c
.RI "boolean \fBisKeyUsed\fP ()"
.br
.ti -1c
.RI "void \fBsetKeyUsed\fP (boolean keyUsed)"
.br
.ti -1c
.RI "void \fBsetCurrentRoom\fP (\fBRoom\fP currentRoom)"
.br
.ti -1c
.RI "List< \fBAdvObject\fP > \fBgetInventory\fP ()"
.br
.ti -1c
.RI "abstract void \fBinit\fP ()  throws Exception"
.br
.ti -1c
.RI "abstract void \fBnextMove\fP (\fBParserOutput\fP p, \fBWindow\fP window)"
.br
.ti -1c
.RI "abstract String \fBgetWelcomeMsg\fP ()"
.br
.ti -1c
.RI "void \fBaddObject\fP (\fBAdvObject\fP obj)"
.br
.ti -1c
.RI "Optional< \fBAdvObject\fP > \fBgetObjectById\fP (int id)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Abstract class representing the game description\&. It serves as a blueprint for creating specific game instances, defining the common structure and behavior of the game\&. 
.SH "Member Function Documentation"
.PP 
.SS "void di\&.uniba\&.map\&.b\&.adventure\&.GameDescription\&.addObject (\fBAdvObject\fP obj)"
Adds an object to the list of all objects in the game\&. 
.PP
\fBParameters\fP
.RS 4
\fIobj\fP The AdvObject to add 
.RE
.PP

.SS "List< \fBCommand\fP > di\&.uniba\&.map\&.b\&.adventure\&.GameDescription\&.getCommands ()"
Returns the list of commands available in the game\&. 
.PP
\fBReturns\fP
.RS 4
List of Command objects 
.RE
.PP

.SS "\fBRoom\fP di\&.uniba\&.map\&.b\&.adventure\&.GameDescription\&.getCurrentRoom ()"
Returns the current room where the player is located\&. 
.PP
\fBReturns\fP
.RS 4
Current Room object 
.RE
.PP

.SS "List< \fBAdvObject\fP > di\&.uniba\&.map\&.b\&.adventure\&.GameDescription\&.getInventory ()"
Returns the player's inventory\&. 
.PP
\fBReturns\fP
.RS 4
List of AdvObject objects in the player's inventory 
.RE
.PP

.SS "Optional< \fBAdvObject\fP > di\&.uniba\&.map\&.b\&.adventure\&.GameDescription\&.getObjectById (int id)"
Retrieves an object by its ID from the list of all objects in the game\&. 
.PP
\fBParameters\fP
.RS 4
\fIid\fP The ID of the object to retrieve 
.RE
.PP
\fBReturns\fP
.RS 4
An Optional containing the AdvObject if found, or an empty Optional otherwise 
.RE
.PP

.SS "List< \fBRoom\fP > di\&.uniba\&.map\&.b\&.adventure\&.GameDescription\&.getRooms ()"
Returns the list of rooms in the game\&. 
.PP
\fBReturns\fP
.RS 4
List of Room objects 
.RE
.PP

.SS "abstract String di\&.uniba\&.map\&.b\&.adventure\&.GameDescription\&.getWelcomeMsg ()\fR [abstract]\fP"
Returns the welcome message for the game\&. This method must be implemented by subclasses\&. 
.PP
\fBReturns\fP
.RS 4
The welcome message as a String 
.RE
.PP

.PP
Reimplemented in \fBdi\&.uniba\&.map\&.b\&.adventure\&.impl\&.SpaceEscape\fP\&.
.SS "abstract void di\&.uniba\&.map\&.b\&.adventure\&.GameDescription\&.init () throws Exception\fR [abstract]\fP"
Initializes the game\&. This method must be implemented by subclasses\&. 
.PP
\fBExceptions\fP
.RS 4
\fIException\fP if an error occurs during initialization 
.RE
.PP

.PP
Reimplemented in \fBdi\&.uniba\&.map\&.b\&.adventure\&.impl\&.SpaceEscape\fP\&.
.SS "boolean di\&.uniba\&.map\&.b\&.adventure\&.GameDescription\&.isKeyUsed ()"
Returns whether a key has been used in the game\&. 
.PP
\fBReturns\fP
.RS 4
true if the key has been used, false otherwise 
.RE
.PP

.SS "abstract void di\&.uniba\&.map\&.b\&.adventure\&.GameDescription\&.nextMove (\fBParserOutput\fP p, \fBWindow\fP window)\fR [abstract]\fP"
Processes the player's next move based on the parsed input and updates the game state accordingly\&. This method must be implemented by subclasses\&. 
.PP
\fBParameters\fP
.RS 4
\fIp\fP The parsed player input 
.br
\fIwindow\fP The game window for displaying output 
.RE
.PP

.PP
Reimplemented in \fBdi\&.uniba\&.map\&.b\&.adventure\&.impl\&.SpaceEscape\fP\&.
.SS "void di\&.uniba\&.map\&.b\&.adventure\&.GameDescription\&.setCurrentRoom (\fBRoom\fP currentRoom)"
Sets the current room where the player is located\&. 
.PP
\fBParameters\fP
.RS 4
\fIcurrentRoom\fP The Room object to set as the current room 
.RE
.PP

.SS "void di\&.uniba\&.map\&.b\&.adventure\&.GameDescription\&.setCurrentRoomById (int roomId)"
Sets the current room based on the provided room ID\&. 
.PP
\fBParameters\fP
.RS 4
\fIroomId\fP ID of the room to set as the current room 
.RE
.PP

.SS "void di\&.uniba\&.map\&.b\&.adventure\&.GameDescription\&.setGame (int roomId, List< Integer > inventoryIds, boolean monsterAlive, boolean isDoorOpen)"
Sets up the game state based on the provided parameters\&. 
.PP
\fBParameters\fP
.RS 4
\fIroomId\fP ID of the current room 
.br
\fIinventoryIds\fP List of IDs for objects in the player's inventory 
.br
\fImonsterAlive\fP Flag indicating if the monster is alive 
.br
\fIisDoorOpen\fP Flag indicating if a door is open 
.RE
.PP

.SS "void di\&.uniba\&.map\&.b\&.adventure\&.GameDescription\&.setKeyUsed (boolean keyUsed)"
Sets the flag indicating whether a key has been used in the game\&. 
.PP
\fBParameters\fP
.RS 4
\fIkeyUsed\fP true to indicate the key has been used, false otherwise 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
